/* Automatically generated by nMigen 0.2.dev12+g318274d. Do not edit. */
/* Generated by Yosys 0.9+932 (git sha1 dadaf7ed, clang 6.0.0-1ubuntu2 -fPIC -Os) */

module \U$$0 (hsync, tv_out, rst, clk, vsync);
  wire \$1 ;
  wire [10:0] \$10 ;
  wire [10:0] \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire [10:0] \$3 ;
  wire \$31 ;
  wire [10:0] \$4 ;
  wire \$6 ;
  wire \$8 ;
  wire \U$$0_ce ;
  input clk;
  output hsync;
  reg hsync;
  reg [9:0] hsync_count = 10'h000;
  reg [9:0] \hsync_count$next ;
  input rst;
  wire tv_cond;
  output tv_out;
  output vsync;
  reg vsync;
  reg [9:0] vsync_count = 10'h000;
  reg [9:0] \vsync_count$next ;
  wire x;
  wire y;
  assign \$11  = vsync_count + 1'h1;
  assign \$13  = hsync_count >= 10'h290;
  assign \$15  = hsync_count <= 10'h2ef;
  assign \$17  = \$13  & \$15 ;
  assign \$1  = hsync_count == 10'h320;
  assign \$19  = vsync_count >= 10'h201;
  assign \$21  = vsync_count <= 10'h202;
  assign \$23  = \$19  & \$21 ;
  assign \$25  = vsync_count < 9'h1e0;
  assign \$27  = hsync_count < 10'h280;
  assign \$29  = \$25  & \$27 ;
  assign \$31  = tv_cond ? 1'h1 : 1'h0;
  assign \$4  = hsync_count + 1'h1;
  assign \$6  = hsync_count == 10'h320;
  assign \$8  = vsync_count == 10'h320;
  always @(posedge clk)
      vsync_count <= \vsync_count$next ;
  always @(posedge clk)
      hsync_count <= \hsync_count$next ;
  \U$$0$1  \U$$0  (
    .ce(\U$$0_ce ),
    .clk(clk),
    .rst(rst)
  );
  always @* begin
    \hsync_count$next  = hsync_count;
    casez (\U$$0_ce )
      1'h1:
          casez (\$1 )
            1'h1:
                \hsync_count$next  = 10'h000;
            default:
                \hsync_count$next  = \$3 [9:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \hsync_count$next  = 10'h000;
    endcase
  end
  always @* begin
    \vsync_count$next  = vsync_count;
    casez (\U$$0_ce )
      1'h1:
          casez (\$6 )
            1'h1:
                casez (\$8 )
                  1'h1:
                      \vsync_count$next  = 10'h000;
                  default:
                      \vsync_count$next  = \$10 [9:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \vsync_count$next  = 10'h000;
    endcase
  end
  always @* begin
    casez (\$17 )
      1'h1:
          hsync = 1'h1;
      default:
          hsync = 1'h0;
    endcase
  end
  always @* begin
    casez (\$23 )
      1'h1:
          vsync = 1'h1;
      default:
          vsync = 1'h0;
    endcase
  end
  assign \$3  = \$4 ;
  assign \$10  = \$11 ;
  assign tv_out = \$31 ;
  assign tv_cond = \$29 ;
  assign y = vsync_count[0];
  assign x = hsync_count[0];
endmodule

module \U$$0$1 (rst, clk, ce);
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire [1:0] \$7 ;
  wire [1:0] \$8 ;
  output ce;
  reg ce = 1'h0;
  reg \ce$next ;
  input clk;
  wire [-1:0] counter;
  wire [-1:0] \counter$next ;
  wire enable;
  input rst;
  assign \$1  = "" == 1'h0;
  assign \$3  = ~ enable;
  assign \$5  = \$3  | ce;
  assign \$8  = "" - 1'h1;
  always @(posedge clk)
      ce <= \ce$next ;
  always @* begin
    \ce$next  = \$1 ;
    casez (rst)
      1'h1:
          \ce$next  = 1'h0;
    endcase
  end
  assign \$7  = \$8 ;
  assign "" = "";
  assign enable = 1'h1;
endmodule

module cd_sync(clk, clk50_0__i, rst);
  output clk;
  (* keep = 1 *)
  input clk50_0__i;
  output rst;
  reset_sync reset_sync (
    .clk(clk),
    .rst(rst)
  );
  assign clk = clk50_0__i;
endmodule

module reset_sync(clk, rst);
  wire \$1 ;
  wire \$3 ;
  input clk;
  output rst;
  wire rst_n;
  assign \$1  = ~ 1'h0;
  assign \$3  = ~ rst_n;
  altera_std_synchronizer #(
    .depth(2)
  ) \U$$0  (
    .clk(clk),
    .din(1'h1),
    .dout(rst_n),
    .reset_n(\$1 )
  );
  assign rst = \$3 ;
endmodule

module top(vga_0__g__io, vga_0__b__io, vga_0__hs__io, vga_0__vs__io, clk50_0__io, vga_0__r__io);
  wire \$1 ;
  wire \$3 ;
  wire \U$$0_clk ;
  wire \U$$0_hsync ;
  wire \U$$0_rst ;
  wire \U$$0_tv_out ;
  wire \U$$0_vsync ;
  (* keep = 1 *)
  wire cd_sync_clk50_0__i;
  input clk50_0__io;
  output [3:0] vga_0__b__io;
  reg [3:0] vga_0__b__o;
  output [3:0] vga_0__g__io;
  reg [3:0] vga_0__g__o;
  output vga_0__hs__io;
  wire vga_0__hs__o;
  output [3:0] vga_0__r__io;
  reg [3:0] vga_0__r__o;
  output vga_0__vs__io;
  wire vga_0__vs__o;
  assign \$1  = ~ \U$$0_vsync ;
  assign \$3  = ~ \U$$0_hsync ;
  \U$$0  \U$$0  (
    .clk(\U$$0_clk ),
    .hsync(\U$$0_hsync ),
    .rst(\U$$0_rst ),
    .tv_out(\U$$0_tv_out ),
    .vsync(\U$$0_vsync )
  );
  cd_sync cd_sync (
    .clk(\U$$0_clk ),
    .clk50_0__i(cd_sync_clk50_0__i),
    .rst(\U$$0_rst )
  );
  altiobuf_in #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(1),
    .use_differential_mode("FALSE")
  ) clk50_0 (
    .datain(clk50_0__io),
    .dataout(cd_sync_clk50_0__i)
  );
  altiobuf_out #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(4),
    .use_differential_mode("FALSE"),
    .use_oe("FALSE")
  ) vga_0__b (
    .datain(vga_0__b__o),
    .dataout(vga_0__b__io)
  );
  altiobuf_out #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(4),
    .use_differential_mode("FALSE"),
    .use_oe("FALSE")
  ) vga_0__g (
    .datain(vga_0__g__o),
    .dataout(vga_0__g__io)
  );
  altiobuf_out #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(1),
    .use_differential_mode("FALSE"),
    .use_oe("FALSE")
  ) vga_0__hs (
    .datain(vga_0__hs__o),
    .dataout(vga_0__hs__io)
  );
  altiobuf_out #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(4),
    .use_differential_mode("FALSE"),
    .use_oe("FALSE")
  ) vga_0__r (
    .datain(vga_0__r__o),
    .dataout(vga_0__r__io)
  );
  altiobuf_out #(
    .enable_bus_hold("FALSE"),
    .number_of_channels(1),
    .use_differential_mode("FALSE"),
    .use_oe("FALSE")
  ) vga_0__vs (
    .datain(vga_0__vs__o),
    .dataout(vga_0__vs__io)
  );
  always @* begin
    casez (\U$$0_tv_out )
      1'h1:
          vga_0__r__o = 4'h7;
      default:
          vga_0__r__o = 4'h0;
    endcase
  end
  always @* begin
    casez (\U$$0_tv_out )
      1'h1:
          vga_0__g__o = 4'h7;
      default:
          vga_0__g__o = 4'h0;
    endcase
  end
  always @* begin
    casez (\U$$0_tv_out )
      1'h1:
          vga_0__b__o = 4'h7;
      default:
          vga_0__b__o = 4'h0;
    endcase
  end
  assign vga_0__hs__o = \$3 ;
  assign vga_0__vs__o = \$1 ;
endmodule
